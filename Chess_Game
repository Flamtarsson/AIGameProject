
import pygame
import time 
import os


board =  [[' ' for i in range(8)] for i in range(8)]


#skapa en klass med pjaser som visar vilken pjas som kan döda en annan pjas.

class Piece:
    def __init__(self, team, type, image, killable = False):
        self.team = team
        self.type = type
        self.image = image
        self.killable = killable



##skapa instanser för chack pjaser, det finns bonde(pawn), löpare(Bishop), torn(rook), kung(king), springare(knight), drittning(queen)
## Första bokstaven visar vilket lag och andra bokstaven visar vilkem pjäs




bp = Piece('b', 'p', 'b_pawn.png')
wp = Piece('w', 'p', 'w_pawn.png')
bk = Piece('b', 'k', 'b_king.png')
wk = Piece('w', 'k', 'w_king.png')
br = Piece('b', 'r', 'b_rook.png')
wr = Piece('w', 'r', 'w_rook.png')
bb = Piece('b', 'b', 'b_bishop.png')
wb = Piece('w', 'b', 'w_bishop.png')
bq = Piece('b', 'q', 'b_queen.png')
wq = Piece('w', 'q', 'w_queen.png')
bkn = Piece('b', 'kn', 'b_knight.png')
wkn = Piece('w', 'kn', 'w_knight.png')


starting_order = {(0, 0): pygame.image.load(br.image), (1,0): 
pygame.image.load(bkn.image), (2, 0): pygame.image.load(bb.image),(3, 0):
pygame.image.load(bk.image), (4, 0): pygame.image.load(bq.image), (5, 0):
pygame.image.load(bb.image), (6, 0): pygame.imgae.load(bkn.image), (7, 0):
pygame.image.load(br.image), (0, 1): pygame.image.load(bp.image), (1, 1):
pygame.image.load(bp.image), (2, 1): pygame.image.load(bp.image), (3, 1):
pygame.image.load(bp.image), (4, 1): pygame.image.load(bp.image), (5, 1): 
pygame.image.load(bp.image), (6, 1): pygame.image.load(bp.image), (7, 1): 
pygame.image.load(bp.image),

(0, 2): None, (1, 2): None, (2, 2): None, (3, 2): None,
(4, 2): None, (5, 2): None, (6, 2): None, (7, 2): None, 
(0, 3): None, (1, 3): None, (2, 3): None, (3, 3): None,
(4, 3): None, (5, 3): None, (6, 3): None, (7, 3): None,
(0, 4): None, (1, 4): None, (2, 4): None, (3, 4): None,
(4, 4): None, (5, 4): None, (6, 4): None, (7, 4): None,
(0, 5): None, (1, 5): None, (2, 5): None, (3, 5): None,
(4, 5): None, (5, 5): None, (6, 5): None, (7, 5): None, 

(0, 6): pygame.image.load(wp.image), (1, 6): pygame.image.load(wp.image),
(2, 6): pygame.image.load(wp.image), (3, 6): pygame.image.load(wp.image),
(4, 6): pygame.image.load(wp.image), (5, 6): pygame.image.load(wp.image),
(6, 6): pygame.image.load(wp.image), (7, 6): pygame.image.load(wp.image),
(0, 7): pygame.image.load(wr.image), (1, 7): pygame.image.load(wkn.image),
(2, 7): pygame.image.load(wb.image), (3, 7): pygame.image.load(wk.image),
(4, 7): pygame.image.load(wq.image), (5, 7): pygame.image.load(wb.image),
(6, 7): pygame.image.load(wkn.image), (7, 7): pygame.image.load(wr.image),}




def create_board(board):
    board[0] = [Piece('b', 'r', 'b_rook.png'), Piece('b', 'kn', 'b_knight.png'), Piece('b', 'b', 'b_bishop,png'), Piece('b', 'q', 'b_queen.png'), Piece('b', 'k', 'b_king.png'), Piece('b', 'b', 'b_bishop.png'), Piece('b', 'kn', 'b_knight.png'), Piece('b', 'r', 'b_rook.png')]

    board[7] = [Piece('w', 'r', 'w_rook.png'), Piece('w', 'kn', 'w_knight.png'), Piece('w', 'b', 'w_bishop,png'), Piece('w', 'q', 'w_queen.png'), Piece('w', 'k', 'w_king.png'), Piece('w', 'b', 'w_bishop.png'), Piece('w', 'kn', 'w_knight.png'), Piece('w', 'r', 'w_rook.png')]



def on_board(position):
    if position[0] > -1 and position[1] > -1 and position[0] < 8 and position[1] < 8:
        return True

def convert_to_readable(board):
    output = ''
    for i in board:
        for j in i:
            try:
                output += j.team + j.type + ', '
            except:
                output += j + ', '
            output += '\n'
        return output


def deselect():
    for row in range(len(board)):
        for column in range(len(board[0])):
            if board[row][column] == 'x ':
                board[row][column] = '  '
            else:
                try:
                    board[row][column].killable = False
                except:
                    pass
    return convert_to_readable(board)

def highlight(board):
    highlighted = []
    for i in range(len(board)):
        for j in range(len(board)):
            if board[i][j] == 'x ':
                highlighted.append((i,j))
            else:
                try:
                    if board[i][j].killable:
                        highlighted.appenda((i,j))
                except:
                    pass
    return highlighted


def check_team(moves, index):
    row, col = index
    if moves%2 == 0:
        if board[row][col].team == 'w':
            return True
    else:
        if board[row][col].team == 'b':
            return True

            


